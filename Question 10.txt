Write a function called "inWords" that takes a number between 1 and 99,99,99,999 and returns a String representing the input number in words.

public static String inWords(int num) {
	// do stuff here
	return null;
}
For example,

inWords(12345);
// should return "twelve thousand three hundred forty five"
inWords(10203040);
// should return "one crore two lakh three thousand forty"
inWords(101);
// should return "one hundred one"
Call the function in main, multiple times by supplying multiple values and verify the same.


Answers:  


using System;
class inWords {
 
    
    static string[] one = { "", "one ", "two ", "three ", "four ",
                            "five ", "six ", "seven ", "eight ",
                            "nine ", "ten ", "eleven ", "twelve ",
                            "thirteen ", "fourteen ", "fifteen ",
                            "sixteen ", "seventeen ", "eighteen ",
                            "nineteen " };
 
  
    static string[] ten = { "", "", "twenty ", "thirty ", "forty ",
                            "fifty ", "sixty ", "seventy ", "eighty ",
                            "ninety " };
 
    // n is 1- or 2-digit number
    static string numToWords(int n, string s)
    {
        string str = "";
 
        // if n is more than 19, divide it
        if (n > 19) {
            str += ten[n / 10] + one[n % 10];
        }
        else {
            str += one[n];
        }
 
        // if n is non-zero
        if (n != 0) {
            str += s;
        }
 
        return str;
    }
 
    // Function to print a given number in words
    static string convertToWords(long n)
    {
 
        // stores word representation of
        // given number n
        string out1 = "";
 
        // handles digits at ten millions and
        // hundred millions places (if any)
        out1 += numToWords((int)(n / 10000000),
                           "crore ");
 
        // handles digits at hundred thousands
        // and one millions places (if any)
        out1 += numToWords((int)((n / 100000) % 100),
                           "lakh ");
 
        // handles digits at thousands and tens
        // thousands places (if any)
        out1 += numToWords((int)((n / 1000) % 100),
                           "thousand ");
 
        // handles digit at hundreds places (if any)
        out1 += numToWords((int)((n / 100) % 10),
                           "hundred ");
 
        if (n > 100 && n % 100 > 0) {
            out1 += "and ";
        }
 
        // handles digits at ones and tens
        // places (if any)
        out1 += numToWords((int)(n % 100), "");
 
        return out1;
    }
 
    // Driver code
    static void Main()
    {
        // long handles upto 9 digit no
        // change to unsigned long long int to
        // handle more digit number
        long n = 1313;
 
        // convert given number in words
        Console.WriteLine(convertToWords(n));
    }
}